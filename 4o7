class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        m, n = len(nums1), len(nums2)

        # Ensure nums1 is the smaller array to optimize binary search
        if m > n:
            nums1, nums2 = nums2, nums1
            m, n = n, m

        # Define binary search boundaries for the smaller array
        low, high = 0, m

        while low <= high:
            # Partition index for nums1
            i = (low + high) // 2
            
            # Partition index for nums2, derived from total half length
            j = (m + n + 1) // 2 - i

            # Get the four boundary values for the partitions, handling edge cases
            max_left_nums1 = float('-inf') if i == 0 else nums1[i-1]
            min_right_nums1 = float('inf') if i == m else nums1[i]
            max_left_nums2 = float('-inf') if j == 0 else nums2[j-1]
            min_right_nums2 = float('inf') if j == n else nums2[j]

            # Check if the partition is valid
            if max_left_nums1 <= min_right_nums2 and max_left_nums2 <= min_right_nums1:
                # Correct partition found
                # If total elements is odd, median is the max of the left half
                if (m + n) % 2 == 1:
                    return float(max(max_left_nums1, max_left_nums2))
                # If total elements is even, median is the average of the two middle elements
                else:
                    return (max(max_left_nums1, max_left_nums2) + min(min_right_nums1, min_right_nums2)) / 2.0
            
            # Adjust binary search boundaries
            elif max_left_nums1 > min_right_nums2:
                # Partition in nums1 is too far to the right
                high = i - 1
            else:
                # Partition in nums1 is too far to the left
                low = i + 1

        # Fallback for unexpected cases (should not be reached in a valid sorted array input)
        return 0.0
        
